vim9script

# prevent by loading default plugins
const g:netrw_silent: bool = 0
const g:loaded_rrhelper: bool = 1
const g:loaded_gzip: bool = 1
const g:loaded_getscriptPlugin: bool = 1
const g:loaded_vimballPlugin: bool = 1
const g:loaded_netrwPlugin: bool = 1
const g:loaded_zipPlugin: bool = 1
const g:loaded_manpager: bool = 1
const g:loaded_spellfile: bool = 1
const g:loaded_tohtml: bool = 1
const g:loaded_2html_plugin: bool = 1
#const g:loaded_fzf: bool = 1
#const g:loaded_matchparen: bool = 1
const g:loaded_logiPat: bool = 1
const g:loaded_tarPlugin: bool = 1
const g:netrw_use_noswf: bool = 0

# drop vi compatibility
set nocompatible

# theme and font
syntax on
colorscheme codedark
#set termguicolors # truecolor support

# hide tildes
highlight EndOfBuffer ctermfg=bg ctermbg=bg

# no timeout on mode switching
set notimeout
set nottimeout

# scroll padding
# or margin
# idk
set scrolloff=5

# search
set ignorecase
set incsearch
set hlsearch
set shortmess-=S

# numbers and relativenumbers
set number
set relativenumber

# cursor
#set cursorline

# dont show current mode
set noshowmode

# active status lines (for lightline)
set laststatus=2
set showtabline=2

# hide command line
# set cmdheight=0

# indent
set shiftwidth=2
set tabstop=2
set smarttab
set smartindent
set autoindent
set expandtab

# folds
set foldmethod=indent
set nofoldenable

# allow cursor to move where there is no text in visual block mode
#set virtualedit=block

# filetypes plugins
filetype plugin indent on

# auto read file
set autoread
set updatetime=200

# wild menu for autocomplete command on command mode
set wildmenu
set wildoptions=pum
set pumheight=10

# enable mouse mode in all modes
set mouse=a

# enable clipboard support
set clipboard=unnamedplus # only for +clipboard option(
set pastetoggle=<F1> # paste mode bind

# correct splits
set splitbelow
set splitright

# enable autocomplete on tab
set omnifunc=ale#completion#OmniFunc
set completeopt=menu,preview
set completepopup=height:10
const g:SuperTabDefaultCompletionType: string = "<C-n>"

# linters
g:ale_linters = {
  "nim": ["nimlsp", "nimcheck"],
  "python": ["flake8", "pylint", "pydocstyle", "pycodestyle", "bandit", "mypy"],
}

# formaters
g:ale_fixers = {
  "*": ["remove_trailing_lines", "trim_whitespace"],
  "nim": ["nimpretty"],
  "python": ["black", "isort", "autopep8", "yapf"],
  "go": ["gofmt"]
}

# lightline colorscheme
const g:lightline = {
  "colorscheme": "codedark"
}

# disable numbers in fern
autocmd FileType fern setlocal norelativenumber | setlocal nonumber

# tabs in go files
autocmd FileType go setlocal noexpandtab

# fern dir symbols
const g:fern#renderer#default#leading: string = "│"
const g:fern#renderer#default#root_symbol: string = "┬ "
const g:fern#renderer#default#leaf_symbol: string = "├─ "
const g:fern#renderer#default#collapsed_symbol: string = "├─ "
const g:fern#renderer#default#expanded_symbol: string = "├┬ "

# brackets rainbow
const g:rainbow_active: bool = 1
const g:rainbow_conf = {
  'guifgs': ['yellow', 'lightmagenta', 'lightblue', 'lightcyan'],
  'ctermfgs': ['yellow', 'lightmagenta', 'lightblue', 'lightcyan']
}

# location for viminfo file
set viminfofile=~/.vim/viminfo

# keys
# tabs keys
nnoremap <C-b> :tabnew<CR>
nnoremap <C-c> :tabclose<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-p> :tabprevious<CR>

# save and exit keys
nnoremap <C-q> :q<CR>
nnoremap <C-s> :w<CR>

# spawn floating terminal
nnoremap <C-z> :tabnew<CR>:terminal ++curwin<CR>

# move lines
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

# format buffer
nnoremap ta :ALEFix<CR>

# spawn fern.vim file manager
nnoremap tr :Fern . -drawer -width=25 -wait<CR>

# clear last search pattern
nnoremap <C-f> :let @/ = ""<CR>

# change mode from insert to normal
inoremap jk <ESC>

# binds for distraction-free mode
nnoremap gyo :Goyo<CR>:highlight EndOfBuffer ctermfg=bg ctermbg=bg<CR>
nnoremap gnyo :Goyo!<CR>:highlight EndOfBuffer ctermfg=bg ctermbg=bg<CR>

# copy to system clipboard through xclip)
# if vim doesnt have +clipboard option
vnoremap <C-y> :w !xclip -selection clipboard<CR><CR>
